---
title: Homework 7 - Creating a resume database
author: Trae Evans
date: 11/21/2023
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document contains infromation regarding a companies employees. SHowing various tables containing there information from there specific skill sets as well as positions held.

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-mudboy1>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This databse shows all the skills and roles assigned to each individual employee within a company.

## Crows-foot diagram

There are two main entities: CUSTOMER and DELIVERY-ADDRESS.
The relationship between CUSTOMER and ORDER is represented by the line connecting them, with the label places. This indicates that a customer can place one or more orders.
The relationship between CUSTOMER and DELIVERY-ADDRESS is shown with the label uses, suggesting that a customer uses one or more delivery addresses.
For the CUSTOMER entity, it includes an integer attribute id, and string attributes first_name and last_name. The DELIVERY-ADDRESS entity has an integer attribute id.

```{mermaid}
%%| echo: false
erDiagram
    Customer ||--o{ Order : places
    Customer }|..|{ Delivery-Address : uses
       Customer{
        int id
        string first_name
        string last_name
    }
    Delivery-Address {
        int id
        string street_address
        string city
        string state
        string postal_code
        string country
        string contact_name
        string contact_phone
        string special_instructions
        boolean is_default
    }
    Order {
        int order_id
        date order_date
        string order_status
        int total_amount
    }
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe ... 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe ... 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = """
SELECT * FROM skills;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = """
SELECT * FROM roles;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select * from people
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
#| echo: false
#| eval: true
sql = """
SELECT
    people_first_name,
    people_last_name,
    email
FROM
    people
ORDER BY
    people_last_name;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List skill names of Person 1

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT
    people_last_name,
    name,
    tag
from
    peopleskills a 
    inner join people b on (a.people_id=b.people_id)
    inner join skills c on (a.skills_id=c.id)
WHERE
    people_last_name='Person 1'
order BY
    name,
    people_last_name
;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occured:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT 
    people_first_name, people_last_name
FROM 
    people p
    JOIN peopleskills ps ON p.people_id = ps.people_id
    JOIN skills s ON ps.skills_id = s.id
WHERE 
    s.id = 6;

"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true
sql = """
SELECT
    people_first_name,
    people_last_name
FROM
    people a
    INNER JOIN peopleroles b ON (a.people_id = b.people_id)
    INNER JOIN roles c ON (b.role_id = c.id)
WHERE
    c.name = 'Developer';
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills

```{python}
#| echo: false
#| eval: true
sql = """
SELECT
    people_first_name,
    people_last_name,
    email
FROM
    people a
WHERE
    NOT EXISTS (
        SELECT 1
        FROM peopleskills b
        WHERE a.people_id = b.people_id
    );
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills
```{python}
#| echo: false
#| eval: true
sql = """
SELECT
    name,
    tag
FROM
    skills a
WHERE
    NOT EXISTS (
        SELECT 1
        FROM peopleskills b
        WHERE a.id = b.skills_id
    );
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role
```{python}
#| echo: false
#| eval: true
sql = """
SELECT
    people_first_name,
    people_last_name,
    c.name AS skill_name
FROM
    people a
    INNER JOIN peopleskills b ON (a.people_id = b.people_id)
    INNER JOIN skills c ON (b.skills_id = c.id)
    INNER JOIN peopleroles d ON (a.people_id = d.people_id)
    INNER JOIN roles e ON (d.role_id = e.id)
WHERE
    e.name = 'Boss'
ORDER BY
    people_last_name,
    skill_name;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List ids and names of unused roles

```{python}
#| echo: false
#| eval: true
sql = """
SELECT
    id,
    name
FROM
    roles a
WHERE
    NOT EXISTS (
        SELECT 1
        FROM peopleroles b
        WHERE a.id = b.role_id
    );
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

Personally I thought this assignment was very interesting and complex. I enjoy working with SQL and learning how to use these tools. I however once again had some issues with the tools and that caused me to lose alot of motivation and make it hard for me to finish. However once I got the tools working properly and fixed minor mistakes it was very enjoyable to see the outcome of my work. This has also taought me alot about operating systems as well due to alot of my issues being which versions of software is downloaded and certain locations of files and how that effects the overall assignment. 

